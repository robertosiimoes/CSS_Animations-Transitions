@charset "UTF-8";
*, *::before, *::after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box; }

body {
  background: #728082;
  padding: 20px;
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
  align-items: center;
  font-family: 'Muli', sans-serif;
  font-weight: 300; }

.o-title {
  color: #ffffff;
  text-align: center;
  display: block;
  position: relative;
  padding-bottom: 5px;
  margin-bottom: 35px;
  width: 100%;
  align-self: flex-start;
  order: 0; }
  .o-title::after {
    content: '';
    background-color: #21e6c1;
    height: 2px;
    width: 50px;
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%); }

.o-card__grid {
  display: flex;
  flex-flow: row wrap;
  width: 100%;
  padding: 10px;
  margin: auto;
  align-items: center;
  justify-content: center; }

.o-form {
  margin: 0 auto;
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
  align-items: center;
  width: 100%; }
  .o-form__group {
    display: flex;
    flex-flow: row wrap;
    justify-content: center; }
    .o-form__group input {
      border: 2px solid #ffffff;
      border-radius: 50px;
      color: #05004e;
      font-family: inherit;
      outline: none;
      margin-left: 15px;
      padding: 5px;
      /***
                Je note un problème dans le comportement des pseudos
                classes :required et :invalid qui s'écrase l'une et
                l'autre dans leur comportement. Ex :
                Un élément non séléctionné et non rempli a un conflit de style
                :blank n'étant pas encore utilisable
             ***/ }
      .o-form__group input:focus {
        border: 2px solid #21e6c1;
        transition: border 500ms; }
      .o-form__group input:not(:focus):invalid {
        background-color: #e62146;
        border: 2px solid #e62146;
        color: #ffffff;
        animation: Headshake 100ms cubic-bezier(0.4, 0.1, 0.6, 0.9) 2; }
  .o-form .o-group__label {
    color: #ffffff;
    font-size: 14px;
    line-height: 28px; }

.o-card__shape {
  background-color: #1c232d;
  display: flex;
  flex-flow: column wrap;
  align-items: flex-start;
  justify-content: flex-start;
  height: 200px;
  padding: 25px;
  position: relative;
  width: 30%;
  margin: 10px; }
  .o-card__shape:hover > .o-square {
    transition: left 1s, transform 1s;
    transform: translateX(-100%);
    left: 100%; }
  .o-card__shape:hover > [class*="o-square"][class*="--scale"] {
    transform: scale(3, 0.5); }
  .o-card__shape:hover > [class*="o-square"][class*="--scaleH"] {
    transform: scaleX(2); }
  .o-card__shape:hover > [class*="o-square"][class*="--scaleV"] {
    transform: scaleY(2); }
  .o-card__shape:hover > [class*="o-square"][class*="--translating"] {
    transform: translate(50px, 5px); }
  .o-card__shape:hover > [class*="o-square"][class*="--translatingX"] {
    transform: translateX(50px); }
  .o-card__shape:hover > [class*="o-square"][class*="--translatingY"] {
    transform: translateY(10px); }
  .o-card__shape:hover > [class*="o-square"][class*="--withText"] {
    transform: scale(1) rotate(0deg); }
    .o-card__shape:hover > [class*="o-square"][class*="--withText"] .o-text {
      transform: translateY(0); }
  .o-card__shape:hover > [class*="o-square"][class*="--TS"] {
    transform: translateX(200%) scale(2); }
  .o-card__shape:hover > [class*="o-square"][class*="--ST"] {
    transform: scale(2) translateX(200%); }
  .o-card__shape:hover > [class*="o-square"][class*="--skew"] {
    transform: skew(30deg, 30deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--skewX"] {
    transform: skewX(30deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--skewY"] {
    transform: skewY(30deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRX"] {
    transform: perspective(75px) rotateX(75deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRY"] {
    transform: perspective(75px) rotateY(75deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRZ"] {
    transform: perspective(75px) rotateZ(75deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--PR3D"] {
    transform: perspective(75px) rotate3d(-1, 0.5, -0.75, -75deg); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRTZ"] {
    transform: perspective(75px) translateZ(30px); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRT3D"] {
    transform: perspective(75px) translate3d(75%, -10%, 25px); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRSZTZ"] {
    transform: perspective(75px) scaleZ(20) translateZ(0.1rem); }
  .o-card__shape:hover > [class*="o-square"][class*="--PRS3DTZ"] {
    transform: perspective(75px) scale3d(2, 0.5, 20) translateZ(0.1rem); }
  .o-card__shape:hover > .o-shape__box [class*="o-square"][class*="--rotate_D"] {
    transform: rotate(-360deg);
    transition: transform 500ms ease-in-out; }
  .o-card__shape:hover > .o-shape__box [class*="o-square"][class*="--rotate_T"] {
    transform: rotate(-1turn);
    transition: transform 500ms ease-in-out; }
  .o-card__shape .o-shape__box {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%; }
    .o-card__shape .o-shape__box [class*="o-square"][class*="--rotate_D"] {
      background: #ffffff;
      transform: rotate(0deg); }
    .o-card__shape .o-shape__box [class*="o-square"][class*="--rotate_T"] {
      background: #21e6c1;
      transform: rotate(0turn); }
  .o-card__shape .o-square {
    position: absolute;
    left: 0;
    top: 50%;
    transition: left 1s, transform 1s; }
  .o-card__shape [class*="o-square"] {
    background-color: #ffffff;
    display: inline-block;
    height: 35px;
    width: 35px; }
    .o-card__shape [class*="o-square"][class*="--scale"], .o-card__shape [class*="o-square"][class*="--scaleH"], .o-card__shape [class*="o-square"][class*="--scaleV"], .o-card__shape [class*="o-square"][class*="--translating"], .o-card__shape [class*="o-square"][class*="--translatingX"], .o-card__shape [class*="o-square"][class*="--translatingY"], .o-card__shape [class*="o-square"][class*="--PRX"], .o-card__shape [class*="o-square"][class*="--PRY"], .o-card__shape [class*="o-square"][class*="--PRZ"], .o-card__shape [class*="o-square"][class*="--PR3D"], .o-card__shape [class*="o-square"][class*="--PRTZ"], .o-card__shape [class*="o-square"][class*="--PRT3D"], .o-card__shape [class*="o-square"][class*="--PRSZTZ"], .o-card__shape [class*="o-square"][class*="--PRS3DTZ"], .o-card__shape [class*="o-square"][class*="--rotate"], .o-card__shape [class*="o-square"][class*="--TS"], .o-card__shape [class*="o-square"][class*="--ST"], .o-card__shape [class*="o-square"][class*="--skew"], .o-card__shape [class*="o-square"][class*="--skewX"], .o-card__shape [class*="o-square"][class*="--skewY"] {
      margin: 0 auto;
      transition: transform 300ms linear; }
    .o-card__shape [class*="o-square"][class*="--withText"] {
      position: initial;
      margin: auto;
      overflow: hidden;
      transform: scale(0.1) rotate(-90deg);
      transition: transform 300ms ease-in-out; }
      .o-card__shape [class*="o-square"][class*="--withText"] .o-text {
        display: inline-block;
        transform: translateY(250%);
        transition: transform 350ms ease-out 50ms; }
  .o-card__shape .o-btn {
    background-color: #05004e;
    box-shadow: 0px 4px 10px #010014;
    color: #ffffff;
    border-radius: 50px;
    height: 35px;
    width: 135px;
    margin: auto;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 0; }
    .o-card__shape .o-btn--under {
      order: 2; }
    .o-card__shape .o-btn__text {
      z-index: 1; }
    .o-card__shape .o-btn::after {
      content: '';
      background-color: #080081;
      opacity: 0;
      border-radius: inherit;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transition: opacity 350ms;
      z-index: 0; }
    .o-card__shape .o-btn:hover {
      cursor: pointer; }
      .o-card__shape .o-btn:hover::after {
        opacity: 1; }
    .o-card__shape .o-btn:active + .o-progress > .o-progress__bar {
      animation: Progress_Bar 1000ms forwards; }

.o-progress {
  background-color: #ffffff;
  height: 35px;
  width: 100%;
  padding: 5px; }
  .o-progress__bar {
    height: 25px;
    background-color: #21e6c1;
    transform-origin: left;
    opacity: 0; }
  .o-progress__loading {
    height: 25px;
    background-color: #21e6c1;
    transform-origin: left;
    opacity: 0;
    /*
            Nom animation,
            durée,
            délais de départ,
            expansion des valeurs de départ et de fin
        */
    animation: Progress_Bar 1000ms 0.5s both;
    /*
            Nous pouvons étendre ses valeurs du début à la fin de
            l'animation en utilisant la propriété  animation-fill-mode :

            - Le mot clé « backwards » prolonge les valeurs de départ
            d'une animation avant son lancement,
            couvrant la durée du délai assigné avant
            que l'animation elle-même ne commence,

            - Le mot clé « forwards » prolonge les valeurs finales
            d'une animation jusqu'à ce que la page soit rechargée
            ou que le navigateur soit fermé,

            - Le mot clé « both » prolonge l'animation dans les deux sens ;
        */ }

.o-coding__container {
  background: #1c232d;
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  height: auto;
  width: 800px;
  margin: auto;
  padding: 25px; }
  .o-coding__container .o-anim__container {
    display: flex;
    flex-flow: column wrap;
    align-items: center;
    justify-content: center;
    height: 500px;
    width: 100%;
    position: relative; }
    .o-coding__container .o-anim__container .o-coding__image {
      background-image: url("../images/css-coding.jpg");
      background-repeat: no-repeat;
      background-position: center center;
      background-size: cover;
      height: 300px;
      width: 100%;
      position: absolute;
      animation: Coding_Image 500ms 1.5s both; }

.spin {
  background-color: #15DEA5;
  width: 30vh;
  height: 30vh;
  animation: Spin 3s linear infinite paused; }
  .spin:hover {
    animation-play-state: running; }
